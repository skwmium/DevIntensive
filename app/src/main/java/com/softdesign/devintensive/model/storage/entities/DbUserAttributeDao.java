package com.softdesign.devintensive.model.storage.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ATTRS".
*/
public class DbUserAttributeDao extends AbstractDao<DbUserAttribute, String> {

    public static final String TABLENAME = "USER_ATTRS";

    /**
     * Properties of entity DbUserAttribute.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserRemoteId = new Property(0, String.class, "userRemoteId", true, "USER_REMOTE_ID");
        public final static Property Deleted = new Property(1, boolean.class, "deleted", false, "DELETED");
        public final static Property Order = new Property(2, long.class, "order", false, "ORDER");
    };

    private DaoSession daoSession;


    public DbUserAttributeDao(DaoConfig config) {
        super(config);
    }
    
    public DbUserAttributeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ATTRS\" (" + //
                "\"USER_REMOTE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: userRemoteId
                "\"DELETED\" INTEGER NOT NULL ," + // 1: deleted
                "\"ORDER\" INTEGER NOT NULL );"); // 2: order
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ATTRS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbUserAttribute entity) {
        stmt.clearBindings();
 
        String userRemoteId = entity.getUserRemoteId();
        if (userRemoteId != null) {
            stmt.bindString(1, userRemoteId);
        }
        stmt.bindLong(2, entity.getDeleted() ? 1L: 0L);
        stmt.bindLong(3, entity.getOrder());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbUserAttribute entity) {
        stmt.clearBindings();
 
        String userRemoteId = entity.getUserRemoteId();
        if (userRemoteId != null) {
            stmt.bindString(1, userRemoteId);
        }
        stmt.bindLong(2, entity.getDeleted() ? 1L: 0L);
        stmt.bindLong(3, entity.getOrder());
    }

    @Override
    protected final void attachEntity(DbUserAttribute entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DbUserAttribute readEntity(Cursor cursor, int offset) {
        DbUserAttribute entity = new DbUserAttribute( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userRemoteId
            cursor.getShort(offset + 1) != 0, // deleted
            cursor.getLong(offset + 2) // order
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbUserAttribute entity, int offset) {
        entity.setUserRemoteId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDeleted(cursor.getShort(offset + 1) != 0);
        entity.setOrder(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DbUserAttribute entity, long rowId) {
        return entity.getUserRemoteId();
    }
    
    @Override
    public String getKey(DbUserAttribute entity) {
        if(entity != null) {
            return entity.getUserRemoteId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
