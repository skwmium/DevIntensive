package com.softdesign.devintensive.data.storage.entities;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USERS".
*/
public class DbUserDao extends AbstractDao<DbUser, String> {

    public static final String TABLENAME = "USERS";

    /**
     * Properties of entity DbUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property RemoteId = new Property(0, String.class, "remoteId", true, "REMOTE_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property MobilePhoneNumber = new Property(2, String.class, "mobilePhoneNumber", false, "MOBILE_PHONE_NUMBER");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property VkProfile = new Property(4, String.class, "vkProfile", false, "VK_PROFILE");
        public final static Property About = new Property(5, String.class, "about", false, "ABOUT");
        public final static Property AvatarUrl = new Property(6, String.class, "avatarUrl", false, "AVATAR_URL");
        public final static Property PhotoUrl = new Property(7, String.class, "photoUrl", false, "PHOTO_URL");
        public final static Property Rating = new Property(8, int.class, "rating", false, "RATING");
        public final static Property LinesCount = new Property(9, int.class, "linesCount", false, "LINES_COUNT");
        public final static Property ProjectCount = new Property(10, int.class, "projectCount", false, "PROJECT_COUNT");
    };

    private DaoSession daoSession;


    public DbUserDao(DaoConfig config) {
        super(config);
    }
    
    public DbUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USERS\" (" + //
                "\"REMOTE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: remoteId
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"MOBILE_PHONE_NUMBER\" TEXT," + // 2: mobilePhoneNumber
                "\"EMAIL\" TEXT," + // 3: email
                "\"VK_PROFILE\" TEXT," + // 4: vkProfile
                "\"ABOUT\" TEXT," + // 5: about
                "\"AVATAR_URL\" TEXT," + // 6: avatarUrl
                "\"PHOTO_URL\" TEXT," + // 7: photoUrl
                "\"RATING\" INTEGER NOT NULL ," + // 8: rating
                "\"LINES_COUNT\" INTEGER NOT NULL ," + // 9: linesCount
                "\"PROJECT_COUNT\" INTEGER NOT NULL );"); // 10: projectCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USERS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbUser entity) {
        stmt.clearBindings();
 
        String remoteId = entity.getRemoteId();
        if (remoteId != null) {
            stmt.bindString(1, remoteId);
        }
        stmt.bindString(2, entity.getName());
 
        String mobilePhoneNumber = entity.getMobilePhoneNumber();
        if (mobilePhoneNumber != null) {
            stmt.bindString(3, mobilePhoneNumber);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String vkProfile = entity.getVkProfile();
        if (vkProfile != null) {
            stmt.bindString(5, vkProfile);
        }
 
        String about = entity.getAbout();
        if (about != null) {
            stmt.bindString(6, about);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(7, avatarUrl);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(8, photoUrl);
        }
        stmt.bindLong(9, entity.getRating());
        stmt.bindLong(10, entity.getLinesCount());
        stmt.bindLong(11, entity.getProjectCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbUser entity) {
        stmt.clearBindings();
 
        String remoteId = entity.getRemoteId();
        if (remoteId != null) {
            stmt.bindString(1, remoteId);
        }
        stmt.bindString(2, entity.getName());
 
        String mobilePhoneNumber = entity.getMobilePhoneNumber();
        if (mobilePhoneNumber != null) {
            stmt.bindString(3, mobilePhoneNumber);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String vkProfile = entity.getVkProfile();
        if (vkProfile != null) {
            stmt.bindString(5, vkProfile);
        }
 
        String about = entity.getAbout();
        if (about != null) {
            stmt.bindString(6, about);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(7, avatarUrl);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(8, photoUrl);
        }
        stmt.bindLong(9, entity.getRating());
        stmt.bindLong(10, entity.getLinesCount());
        stmt.bindLong(11, entity.getProjectCount());
    }

    @Override
    protected final void attachEntity(DbUser entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DbUser readEntity(Cursor cursor, int offset) {
        DbUser entity = new DbUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // remoteId
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mobilePhoneNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // vkProfile
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // about
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // avatarUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // photoUrl
            cursor.getInt(offset + 8), // rating
            cursor.getInt(offset + 9), // linesCount
            cursor.getInt(offset + 10) // projectCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbUser entity, int offset) {
        entity.setRemoteId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setMobilePhoneNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVkProfile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAbout(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAvatarUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhotoUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRating(cursor.getInt(offset + 8));
        entity.setLinesCount(cursor.getInt(offset + 9));
        entity.setProjectCount(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DbUser entity, long rowId) {
        return entity.getRemoteId();
    }
    
    @Override
    public String getKey(DbUser entity) {
        if(entity != null) {
            return entity.getRemoteId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDbUserAttributeDao().getAllColumns());
            builder.append(" FROM USERS T");
            builder.append(" LEFT JOIN USER_ATTRS T0 ON T.\"REMOTE_ID\"=T0.\"USER_REMOTE_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DbUser loadCurrentDeep(Cursor cursor, boolean lock) {
        DbUser entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DbUserAttribute attribute = loadCurrentOther(daoSession.getDbUserAttributeDao(), cursor, offset);
        entity.setAttribute(attribute);

        return entity;    
    }

    public DbUser loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DbUser> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DbUser> list = new ArrayList<DbUser>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DbUser> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DbUser> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
